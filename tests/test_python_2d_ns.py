#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
test_python_2d_ns
----------------------------------

Tests for `python_2d_ns` module.
"""


import sys
import unittest

from python_2d_ns.python_2d_ns import *



class TestPython_2d_ns(unittest.TestCase):

    #test x, y coordinates generated by function IC_coor
    #assume use 2 threads and rank==1
    #y coordinate should be the same as serial code
    def test_IC_coor_y_coor(self):
        x, y, kx, ky, k2, k2_exp=IC_coor(64, 64, 32, 1, 1, 1, 2)
        self.assertTrue(y[3,0]==-32)
        self.assertTrue(y[3,5]==-27)
    #x coordinate for rank 2 should start from 0
    def test_IC_coor_x_coor(self):
        x, y, kx, ky, k2, k2_exp=IC_coor(64, 64, 32, 1, 1, 1, 2)
        #this coordinate should be 0
        self.assertTrue(x[0,2]==0)
    #test initial condition, Taylor green forcing, test whether the value is given on specific wavenumber
    def test_IC_con(self):
    	#generate kx, ky, assume 2 threads, rank==0
    	x, y, kx, ky, k2, k2_exp=IC_coor(32, 32, 16, 1, 1, 0, 2)
    	Vxhat, Vyhat=IC_condition(1, 2, kx, ky, 32, 16)
    	#this wavenumber should be zero
    	self.assertTrue(Vyhat[2,5]==0)
    	#this wavenumber should be non-zero
    	self.assertTrue(Vxhat[14,14]==0.5j)
    #test dealiasing function, which will remove values in wavenumber >= Nx/3
    def test_delias(self):
    	#generate kx, ky, assume 2 threads, rank==1
    	Vxhat=zeros((Nx, Np), dtype=complex);
    	Vyhat=zeros((Nx, Np), dtype=complex);
    	Vxhat[:]=1
    	Vxhat, Vyhat=delias(Vxhat, Vyhat, Nx, Np, k2)
    	#this should be zero
    	self.assertTrue(Vxhat[Nx-1,Np-1]==0)
    	self.assertTrue(Vyhat[Nx-1,Np-1]==0)
    #test FFT and IFFT. Take FFT and IFFT on array, it will transform back (with some numerical errors)
    def test_FFT(self):
        testa=zeros((Np, Ny), dtype=float);
        testahat=empty(( N, Np) , dtype = complex )
        if rank==0:      
            testa[2,0]=1
        testa=ifftn_mpi(fftn_mpi(testa, testahat), testa)
        #after FFT and IFFT, this value should be the same
        if rank==0:
            self.assertTrue(testa[2,0]-1<0.0001)



if __name__ == '__main__':
	sys.exit(unittest.main())



